/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class Bundle {
  get version(): Version
  paths(): Array<string>
  getEntryOffset(path: string): bigint | null
  getEntryLen(path: string): bigint | null
  hasPath(path: string): boolean
  getData(path: string): Uint8Array | null
  getHeaders(path: string): Array<[string, string]> | null
}

export declare class BundleBuilder {
  constructor(version?: Version | undefined | null)
  get version(): Version
  entryPaths(): Array<string>
  insertEntry(path: string, data: Buffer, headers?: Array<[string, string]> | undefined | null): boolean
  removeEntry(path: string): boolean
  hasEntry(path: string): boolean
  build(options?: BuildOptions | undefined | null): Bundle
}

export interface BuildHeaderOptions {
  checksumSeed?: number
}

export interface BuildIndexOptions {
  checksumSeed?: number
}

export interface BuildOptions {
  header?: BuildHeaderOptions
  index?: BuildIndexOptions
  dataChecksumSeed?: number
}

export declare function readBundle(path: string): Promise<Bundle>

export type Version =  'v1';

export declare function writeBundle(bundle: Bundle, path: string): Promise<number>
