/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class Bundle {
  manifest(): BundleManifest
  getData(path: string): Buffer | null
  getDataChecksum(path: string): number | null
}
export type JsBundle = Bundle

export declare class BundleBuilder {
  constructor(version?: JsVersion | undefined | null)
  get version(): JsVersion
  entryPaths(): Array<string>
  insertEntry(path: string, data: Buffer, headers?: Record<string, string> | undefined | null): boolean
  removeEntry(path: string): boolean
  containsEntry(path: string): boolean
  build(options?: BuildOptions | undefined | null): Bundle
}
export type JsNapiBundleBuilder = BundleBuilder

export declare class BundleManifest {
  header(): Header
  index(): Index
}
export type JsBundleManifest = BundleManifest

export declare class BundleSource {
  constructor(builtinDir: string, remoteDir: string)
  getFilepath(bundleName: string): Promise<string | null>
  getVersion(bundleName: string): Promise<BundleSourceVersion | null>
  setVersion(bundleName: string, version: string): Promise<void>
  isExists(bundleName: string, version: BundleSourceVersion): Promise<boolean>
  fetch(bundleName: string): Promise<Bundle>
  fetchManifest(bundleName: string): Promise<BundleManifest>
}
export type JsBundleSource = BundleSource

export declare class Header {
  version(): JsVersion
  indexEndOffset(): bigint
  indexSize(): number
}
export type JsHeader = Header

export declare class Index {
  entries(): Record<string, IndexEntry>
  getEntry(path: string): IndexEntry | null
  containsPath(path: string): boolean
}
export type JsIndex = Index

export declare class Remote {
  constructor(endpoint: string, options?: RemoteOptions | undefined | null, onDownload?: (data: RemoteOnDownloadData) => void)
  getInfoAll(): Promise<Array<RemoteBundleInfo>>
  getInfo(bundleName: string): Promise<RemoteBundleInfo>
  download(info: RemoteBundleInfo): Promise<Bundle>
}
export type JsRemote = Remote

export interface BuildHeaderOptions {
  checksumSeed?: number
}

export interface BuildIndexOptions {
  checksumSeed?: number
}

export interface BuildOptions {
  header?: JsBuildHeaderOptions
  index?: JsBuildIndexOptions
  dataChecksumSeed?: number
}

export interface BundleSourceVersion {
  type: BundleSourceVersionType
  version: string
}

export type BundleSourceVersionType =  'builtin'|
'remote';

export type HttpMethod =  'get'|
'head'|
'options'|
'post'|
'put'|
'patch'|
'delete'|
'trace'|
'connect';

export interface HttpOptions {
  defaultHeaders?: Record<string, string>
  userAgent?: string
  timeout?: number
  readTimeout?: number
  connectTimeout?: number
  poolIdleTimeout?: number
  poolMaxIdlePerHost?: number
  referer?: boolean
  tcpNodelay?: boolean
  hickoryDns?: boolean
}

export interface HttpResponse {
  status: number
  headers: Record<string, string>
  body: Buffer
}

export interface IndexEntry {
  offset: number
  len: number
  isEmpty: boolean
  headers: Record<string, string>
}

export declare function readBundle(filepath: string): Promise<Bundle>

export interface RemoteBundleInfo {
  name: string
  version: string
  integrity?: string
}

export interface RemoteOnDownloadData {
  downloadedBytes: number
  totalBytes: number
}

export interface RemoteOptions {
  http?: HttpOptions
}

export type Version =  'v1';

export declare function writeBundle(bundle: Bundle, filepath: string): Promise<bigint>
